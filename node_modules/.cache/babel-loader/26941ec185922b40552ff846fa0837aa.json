{"ast":null,"code":"import $ from 'jquery';\nconst input = 0;\nconst output = 1;\nconst err = 2;\nconst env = 3;\n\nclass ColonyRuntime {\n  constructor(host, port) {\n    this.crypto = new Crypto();\n    this.host = host;\n    this.port = port;\n  }\n\n  load() {\n    var crypto = this.crypto;\n    let promise = new Promise(function (ok, err) {\n      crypto.load().then(() => {\n        ok();\n      });\n    });\n    return promise;\n  }\n\n  crypto() {\n    return this.crypto;\n  }\n\n  sendRPCMsg(msg, prvkey) {\n    let rpcMsg = {\n      \"payloadtype\": msg.msgtype,\n      \"payload\": \"\",\n      \"signature\": \"\"\n    };\n    rpcMsg.payload = btoa(JSON.stringify(msg));\n    rpcMsg.signature = this.crypto.sign(rpcMsg.payload, prvkey);\n    var host = this.host;\n    var port = this.port;\n    let promise = new Promise(function (resolve, reject) {\n      $.ajax({\n        type: \"POST\",\n        url: \"http://\" + host + \":\" + port + \"/api\",\n        data: JSON.stringify(rpcMsg),\n        contentType: 'plain/text',\n        success: function (response) {\n          let rpcReplyMsg = JSON.parse(response);\n          let msg = JSON.parse(atob(JSON.parse(response).payload));\n\n          if (rpcReplyMsg.error == true) {\n            reject(msg);\n          } else {\n            resolve(msg);\n          }\n        },\n        fail: function (xhr, status, error) {\n          reject(atob(JSON.parse(response).payload));\n        }\n      });\n    });\n    return promise;\n  }\n\n  add_colony(colony, prvkey) {\n    var msg = {\n      \"msgtype\": \"addcolonymsg\",\n      \"colony\": colony\n    };\n    return this.sendRPCMsg(msg, prvkey);\n  }\n\n  getColonies(prvkey) {\n    var msg = {\n      \"msgtype\": \"getcoloniesmsg\"\n    };\n    return this.sendRPCMsg(msg, prvkey);\n  }\n\n  getColony(colonyid, prvkey) {\n    var msg = {\n      \"msgtype\": \"getcolonymsg\",\n      \"colonyid\": colonyid\n    };\n    return this.sendRPCMsg(msg, prvkey);\n  }\n\n  addRuntime(runtime, prvkey) {\n    var msg = {\n      \"msgtype\": \"addruntimemsg\",\n      \"runtime\": runtime\n    };\n    return this.sendRPCMsg(msg, prvkey);\n  }\n\n  rejectRuntime(runtimeid, prvkey) {\n    var msg = {\n      \"msgtype\": \"rejectruntimemsg\",\n      \"runtimeid\": runtimeid\n    };\n    return this.sendRPMsg(msg, prvkey);\n  }\n\n  approveRuntime(runtimeid, prvkey) {\n    var msg = {\n      \"msgtype\": \"approveruntimemsg\",\n      \"runtimeid\": runtimeid\n    };\n    return this.sendRPCMsg(msg, prvkey);\n  }\n\n  submitProcess_spec(spec, prvkey) {\n    var msg = {\n      \"msgtype\": \"submitprocessespecmsg\",\n      \"spec\": spec\n    };\n    return this.sendRPCMsg(msg, prvkey);\n  }\n\n  assign(colonyid, prvkey) {\n    var msg = {\n      \"msgtype\": \"assignprocessmsg\",\n      \"latest\": false,\n      \"timeout\": 1,\n      \"colonyid\": colonyid\n    };\n    return this.sendRPCMsg(msg, prvkey);\n  }\n\n  assignLatest(colonyid, prvkey) {\n    var msg = {\n      \"msgtype\": \"assignprocessmsg\",\n      \"latest\": true,\n      \"timeout\": -1,\n      \"colonyid\": colonyid\n    };\n    return this.sendRPCMsg(msg, prvkey);\n  }\n\n  addAttribute(attribute, prvkey) {\n    attribute.attributetype = output;\n    var msg = {\n      \"msgtype\": \"addattributemsg\",\n      \"attribute\": attribute\n    };\n    return this.sendRPCMsg(msg, prvkey);\n  }\n\n  closeProcess(processid, successful, prvkey) {\n    var msg = {\n      \"msgtype\": \"closesuccessfulmsg\",\n      \"processid\": processid\n    };\n\n    if (successful) {\n      return this.sendRPCMsg(msg, prvkey);\n    }\n\n    msg.msgtype = \"closefailedfulmsg\";\n    return this.sendRPCMsg(msg, prvkey);\n  }\n\n  subscribeProcesses(runtimetype, timeout, state, prvkey, callback) {\n    var msg = {\n      \"msgtype\": \"subscribeprocessesmsg\",\n      \"runtimetype\": runtimetype,\n      \"state\": state,\n      \"timeout\": timeout\n    };\n    let rpcMsg = {\n      \"payloadtype\": msg.msgtype,\n      \"payload\": \"\",\n      \"signature\": \"\"\n    };\n    rpcMsg.payload = btoa(JSON.stringify(msg));\n    rpcMsg.signature = this.crypto.sign(rpcMsg.payload, prvkey);\n    let socket = new WebSocket(\"ws://\" + this.host + \":\" + this.port + \"/pubsub\");\n    socket.addEventListener('open', function (event) {\n      socket.send(JSON.stringify(rpcMsg));\n    });\n    let promise = new Promise(function (resolve, reject) {\n      socket.addEventListener('close', function (event) {\n        socket = null;\n        reject();\n      });\n      socket.addEventListener('error', function (event) {\n        socket = null;\n        reject();\n      });\n      socket.addEventListener('message', function (event) {\n        msg = JSON.parse(atob(JSON.parse(event.data).payload));\n        callback(msg);\n      });\n    });\n    return promise;\n  }\n\n}","map":{"version":3,"names":["$","input","output","err","env","ColonyRuntime","constructor","host","port","crypto","Crypto","load","promise","Promise","ok","then","sendRPCMsg","msg","prvkey","rpcMsg","msgtype","payload","btoa","JSON","stringify","signature","sign","resolve","reject","ajax","type","url","data","contentType","success","response","rpcReplyMsg","parse","atob","error","fail","xhr","status","add_colony","colony","getColonies","getColony","colonyid","addRuntime","runtime","rejectRuntime","runtimeid","sendRPMsg","approveRuntime","submitProcess_spec","spec","assign","assignLatest","addAttribute","attribute","attributetype","closeProcess","processid","successful","subscribeProcesses","runtimetype","timeout","state","callback","socket","WebSocket","addEventListener","event","send"],"sources":["/home/johan/dev/github/colonyos/dashboard/dashboard/src/colonies/colonyruntime.js"],"sourcesContent":["import $ from 'jquery';\n\nconst input = 0\nconst output = 1\nconst err = 2\nconst env = 3\n\nclass ColonyRuntime {\n    constructor(host, port) {\n        this.crypto = new Crypto()\n        this.host = host\n        this.port = port\n    }\n\n    load() {\n        var crypto = this.crypto\n        let promise = new Promise(function(ok, err) {\n            crypto.load().then(() => {\n                ok()\n            })\n        })\n        return promise\n    }\n\n    crypto() {\n        return this.crypto\n    }\n\n    sendRPCMsg(msg, prvkey) {\n        let rpcMsg = {\n            \"payloadtype\": msg.msgtype,\n            \"payload\": \"\",\n            \"signature\": \"\"\n        }\n\n        rpcMsg.payload = btoa(JSON.stringify(msg))\n        rpcMsg.signature = this.crypto.sign(rpcMsg.payload, prvkey)\n\n        var host = this.host\n        var port = this.port\n\n        let promise = new Promise(function(resolve, reject) {\n            $.ajax({\n                type: \"POST\",\n                url: \"http://\" + host + \":\" + port + \"/api\",\n                data: JSON.stringify(rpcMsg),\n                contentType: 'plain/text',\n                success: function(response) {\n                    let rpcReplyMsg = JSON.parse(response)\n                    let msg = JSON.parse(atob(JSON.parse(response).payload))\n                    if (rpcReplyMsg.error == true) {\n                        reject(msg)\n                    } else {\n                        resolve(msg)\n                    }\n                },\n                fail: function(xhr, status, error) {\n                    reject(atob(JSON.parse(response).payload))\n                }\n            })\n        })\n\n        return promise\n    }\n\n    add_colony(colony, prvkey) {\n        var msg = {\n            \"msgtype\": \"addcolonymsg\",\n            \"colony\": colony\n        }\n\n        return this.sendRPCMsg(msg, prvkey)\n    }\n\n    getColonies(prvkey) {\n        var msg = {\n            \"msgtype\": \"getcoloniesmsg\"\n        }\n\n        return this.sendRPCMsg(msg, prvkey)\n    }\n\n    getColony(colonyid, prvkey) {\n        var msg = {\n            \"msgtype\": \"getcolonymsg\",\n            \"colonyid\": colonyid\n        }\n\n        return this.sendRPCMsg(msg, prvkey)\n    }\n\n    addRuntime(runtime, prvkey) {\n        var msg = {\n            \"msgtype\": \"addruntimemsg\",\n            \"runtime\": runtime\n        }\n\n        return this.sendRPCMsg(msg, prvkey)\n    }\n\n    rejectRuntime(runtimeid, prvkey) {\n        var msg = {\n            \"msgtype\": \"rejectruntimemsg\",\n            \"runtimeid\": runtimeid\n        }\n\n        return this.sendRPMsg(msg, prvkey)\n    }\n\n    approveRuntime(runtimeid, prvkey) {\n        var msg = {\n            \"msgtype\": \"approveruntimemsg\",\n            \"runtimeid\": runtimeid\n        }\n\n        return this.sendRPCMsg(msg, prvkey)\n    }\n\n    submitProcess_spec(spec, prvkey) {\n        var msg = {\n            \"msgtype\": \"submitprocessespecmsg\",\n            \"spec\": spec\n        }\n\n        return this.sendRPCMsg(msg, prvkey)\n    }\n\n    assign(colonyid, prvkey) {\n        var msg = {\n            \"msgtype\": \"assignprocessmsg\",\n            \"latest\": false,\n            \"timeout\": 1,\n            \"colonyid\": colonyid\n        }\n\n        return this.sendRPCMsg(msg, prvkey)\n    }\n\n    assignLatest(colonyid, prvkey) {\n        var msg = {\n            \"msgtype\": \"assignprocessmsg\",\n            \"latest\": true,\n            \"timeout\": -1,\n            \"colonyid\": colonyid\n        }\n\n        return this.sendRPCMsg(msg, prvkey)\n    }\n\n    addAttribute(attribute, prvkey) {\n        attribute.attributetype = output\n\n        var msg = {\n            \"msgtype\": \"addattributemsg\",\n            \"attribute\": attribute\n        }\n\n        return this.sendRPCMsg(msg, prvkey)\n    }\n\n    closeProcess(processid, successful, prvkey) {\n        var msg = {\n            \"msgtype\": \"closesuccessfulmsg\",\n            \"processid\": processid\n        }\n\n        if (successful) {\n            return this.sendRPCMsg(msg, prvkey)\n        }\n\n        msg.msgtype = \"closefailedfulmsg\"\n        return this.sendRPCMsg(msg, prvkey)\n    }\n\n    subscribeProcesses(runtimetype, timeout, state, prvkey, callback) {\n        var msg = {\n            \"msgtype\": \"subscribeprocessesmsg\",\n            \"runtimetype\": runtimetype,\n            \"state\": state,\n            \"timeout\": timeout\n        }\n\n        let rpcMsg = {\n            \"payloadtype\": msg.msgtype,\n            \"payload\": \"\",\n            \"signature\": \"\"\n        }\n\n        rpcMsg.payload = btoa(JSON.stringify(msg))\n        rpcMsg.signature = this.crypto.sign(rpcMsg.payload, prvkey)\n\n        let socket = new WebSocket(\"ws://\" + this.host + \":\" + this.port + \"/pubsub\");\n\n        socket.addEventListener('open', function(event) {\n            socket.send(JSON.stringify(rpcMsg));\n        });\n\n        let promise = new Promise(function(resolve, reject) {\n            socket.addEventListener('close', function(event) {\n                socket = null\n                reject()\n            });\n\n            socket.addEventListener('error', function(event) {\n                socket = null\n                reject()\n            });\n\n            socket.addEventListener('message', function(event) {\n                msg = JSON.parse(atob(JSON.parse(event.data).payload))\n                callback(msg)\n            });\n        })\n        return promise\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}